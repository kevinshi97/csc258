module part3(SW, KEY, LEDR);
	input [2:0]SW;
	input [0:0]KEY;
	output [0:0]LEDR;
	wire [13:0]seq;
	wire [13:0]out;


	always@(*)
	begin
		case(SW[2:0])
			3'b000: seq = 14'b10101000000000;
			3'b001: seq = 14'b11100000000000;
			3'b010: seq = 14'b10101110000000;
			3'b011: seq = 14'b10101011100000;
			3'b100: seq = 14'b10111011100000;
			3'b101: seq = 14'b11101010111000;
			3'b110: seq = 14'b11101011101110;
			3'b111: seq = 14'b11101110101000;
		endcase
	end
	
	
	always@(posedge CLOCK_50)
	begin 
		if (KEY[0] == 1'b0)
			q <= 28'd99999999;
		else
			begin
			
				if (q == 0)
						q <= 28'd99999999;
				else
						q <= q - 1'b1;
			end
	end
	
	assign cout = (q == 0) ? 1 : 0;
	
	
	always@(posedge CLOCK_50)
	begin 
		if (KEY[0] == 1'b0)
			out <= seq;
		else if (out == 1'b1)
					out = out << 1'b1; 
	end
	
	assign LEDR[0] = out[13];
	
	