//module part2(SW, KEY, HEX0, CLOCK_50);
module part2(SW,HEX0,CLOCK_50);
	input [5:0] SW;
	input CLOCK_50;
	output [6:0] HEX0;
	
	reg [27:0] limit; 
	reg [27:0] count;
	wire enable; 
	reg [3:0] out;
	
	//Speed
	always@(*)
	begin
		case({SW[1], SW[0]})
			2'b00: limit = 0;
			2'b01: limit = 28'd49999999;
			2'b10: limit = 28'd99999999;
			2'b11: limit = 28'd199999999;
		endcase
	end
//Rate Divider

	always@(posedge CLOCK_50)
	begin 
		if (SW[4] == 1'b0)
			count <= limit;
		else
			begin
				if (count == 0)
						count <= limit;
				else
						count <= count - 1'b1;
			end
	end
	
	assign enable = (start == 0) ? 1 : 0;
	
	//Display Counter
	always@(posedge count)
	begin 
		if (SW[4] == 1'b0)
			out <= 0;
		else if (out == 1'b1)
					out <= out + 1'b1; 
	end
	
	//Display
	SevenSegmentDecoder display0(.in(out[3:0]),.out(HEX0[6:0]));
	
endmodule

//7-Segment
module SevenSegmentDecoder(in, out);
	input[3:0]in;
	output reg [6:0]out;
	
	
	always @*
		case(in)
			4'b0000 : out = ~7'b0111111; //0
			4'b0001 : out = ~7'b0000110; //1
			4'b0010 : out = ~7'b1011011; //2
			4'b0011 : out = ~7'b1001111; //3
			4'b0100 : out = ~7'b1100110; //4
			4'b0101 : out = ~7'b1101101; //5 
			4'b0110 : out = ~7'b1111101; //6
			4'b0111 : out = ~7'b0000111; //7
			4'b1000 : out = ~7'b1111111; //8
			4'b1001 : out = ~7'b1101111; //9
			4'b1010 : out = ~7'b1110111; //A
			4'b1011 : out = ~7'b1111100; //b
			4'b1100 : out = ~7'b0111001; //C
			4'b1101 : out = ~7'b1011110; //d
			4'b1110 : out = ~7'b1111001; //E
			4'b1111 : out = ~7'b1110001; //F

		endcase
endmodule 
